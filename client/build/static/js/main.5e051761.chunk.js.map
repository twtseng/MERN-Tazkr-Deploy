{"version":3,"sources":["components/Task.jsx","components/Column.jsx","views/Board.jsx","components/OAuth.jsx","views/Login.jsx","views/Profile.jsx","views/Home.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["task","column","refreshColumn","useDrag","item","type","fromColumn","fromRefreshColumn","collect","monitor","isDragging","drag","Card","style","margin","minWidth","ref","CardContent","Typography","variant","component","Name","deleteColumn","refreshBoard","useDrop","accept","canDrop","props","_id","drop","taskToMove","axios","patch","then","resp","catch","err","console","log","isOver","CardHeader","title","tasks","map","Task","key","CardActions","Button","size","onClick","description","id","useState","board","setBoard","get","data","useEffect","DndProvider","backend","HTML5Backend","e","preventDefault","name","locked","display","padding","columns","Column","columnId","filter","col","put","socket","provider","user","setUser","popup","setPopup","on","close","startAuth","left","window","innerWidth","width","top","innerHeight","height","url","open","openPopup","io","providers","className","OAuth","auth","AppBar","position","Toolbar","color","to","Navbar","Home","path","Login","Profile","Board","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5e051761.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nexport default ({task, column, refreshColumn}) => {\r\n    const [{isDragging}, drag] = useDrag({\r\n        item: { \r\n            type: \"TASK\", \r\n            task: task,\r\n            fromColumn: column,\r\n            fromRefreshColumn: refreshColumn \r\n        },\r\n        collect: monitor => ({\r\n          isDragging: !!monitor.isDragging(),\r\n        }),\r\n      });\r\n\r\n    return (\r\n        <Card style={{margin:\"1rem\",minWidth:200}} ref={drag}>\r\n            <CardContent>\r\n                <Typography variant=\"h5\" component=\"p\">\r\n                    {task.Name}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}","import { Card,CardContent,Button,CardActions, CardHeader } from '@material-ui/core';\r\nimport React from 'react';\r\nimport Task from './Task';\r\nimport axios from 'axios';\r\nimport { useDrop } from 'react-dnd';\r\n\r\nexport default ({column, deleteColumn, refreshBoard}) => {\r\n\r\n\r\n    const moveTask = (taskToMove, fromColumn) => {\r\n        axios.patch(`http://localhost:8000/api/columns/moveTask/${taskToMove._id}/${fromColumn._id}/${column._id}`,{})\r\n        .then(resp => refreshBoard())\r\n        .catch(err => console.log(err));\r\n    }\r\n    const addNewTask = () => {\r\n        axios.patch(`http://localhost:8000/api/columns/${column._id}/addTaskToColumn`,{ Name: \"New Task\", description: \"New task description\"})\r\n        .then(resp => refreshBoard())\r\n        .catch(err => console.log(err));\r\n    }\r\n    const [, drop] = useDrop({\r\n        accept: \"TASK\",\r\n        canDrop: (props) => props.fromColumn._id !== column._id,\r\n        drop: (props) => { \r\n            moveTask(props.task, props.fromColumn);\r\n        },\r\n        collect: monitor => ({\r\n          isOver: !!monitor.isOver(),\r\n        }),\r\n      })\r\n\r\n    return (\r\n    <Card style={{margin:\"1rem\"}} ref={drop}>\r\n        <CardHeader title={column.Name}/>\r\n        <CardContent>\r\n            {column.tasks && column.tasks.map((task) => <Task key={task._id} task={task} column={column}/>)}\r\n        </CardContent>\r\n        <CardActions>\r\n            <Button style={{margin:\"auto\"}} size=\"large\" onClick={addNewTask}>Add Task</Button>\r\n            <Button style={{margin:\"auto\"}} size=\"large\" onClick={deleteColumn}>Delete Column</Button>\r\n        </CardActions>\r\n    </Card>\r\n    )\r\n}","import React,{useState,useEffect} from 'react';\r\nimport Column from '../components/Column';\r\nimport axios from 'axios';\r\nimport { DndProvider } from 'react-dnd'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\n\r\nexport default ({id}) => {\r\n    const [board,setBoard] = useState({});\r\n    const refreshBoard = () => {\r\n        axios.get(`http://localhost:8000/api/boards/${id}`)\r\n        .then(resp => {\r\n            console.log(resp.data);\r\n            setBoard(resp.data);\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    const addColumn = e => {\r\n        e.preventDefault();\r\n        axios.patch(`http://localhost:8000/api/boards/${id}/addColumnToBoard`,{\r\n            name:\"Name\",\r\n            locked:false,\r\n            tasks:[],\r\n            board: id\r\n        })\r\n        .then(resp => refreshBoard())\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    const deleteColumn = columnId => {\r\n        board.columns = board.columns.filter(col => col._id !== columnId);\r\n        console.log(`deleteColumn columnId:${columnId}`);\r\n        console.log(`deleteColumn updatedObject:${board}`);\r\n        axios.put(`http://localhost:8000/api/boards/${id}/update`,board)\r\n        .then(resp => refreshBoard())\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshBoard();\r\n    },[]);\r\n\r\n    return (\r\n        <DndProvider backend={HTML5Backend}>\r\n            <h1>Board</h1>\r\n            <button onClick={addColumn}>Add Column</button>\r\n            <div style={{display:\"flex\",padding:20}}>\r\n                {board.columns && board.columns.map((column) => <Column key={column._id} column={column} refreshBoard={refreshBoard} deleteColumn={() => deleteColumn(column._id)}/>)}\r\n            </div>\r\n        </DndProvider>\r\n    )\r\n}","import React,{useState,useEffect} from 'react'\r\nexport default ({socket,provider}) => {\r\n    const [user,setUser] = useState();\r\n    const [popup,setPopup] = useState();\r\n\r\n    useEffect(() => {\r\n        socket.on(provider,resp => {\r\n            setUser(resp);\r\n            console.log(resp);\r\n        });\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        user && popup.close();\r\n    },[user]);\r\n\r\n    const openPopup = () => {\r\n        const width=600,height=600;\r\n        const left = (window.innerWidth / 2) - (width / 2);\r\n        const top = (window.innerHeight / 2) - (height / 2);\r\n        const url = `http://localhost:8000/auth/${provider}?socketId=${socket.id}`;\r\n\r\n        return window.open(url, \"\", \r\n            `toolbar=no, location=no, directories=no, status=no, menubar=no, \r\n            scrollbars=no, resizable=no, copyhistory=no, width=${width}, \r\n            height=${height}, top=${top}, left=${left}`\r\n        );\r\n    }\r\n\r\n    const startAuth = e => {\r\n        e.preventDefault();\r\n        setPopup(openPopup());\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!user ? <button onClick={e => startAuth(e)}>{provider}</button> : <p>{user.name}</p>}\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport io from 'socket.io-client'\r\nimport OAuth from '../components/OAuth'\r\nconst socket = io(\"http://localhost:8000\")\r\nconst providers = ['twitter', 'google', 'facebook', 'github']\r\n\r\nexport default props => {\r\n    return (\r\n        <div className={'wrapper'}>\r\n            <div className={'container'}>\r\n                {providers.map(provider => <OAuth provider={provider} key={provider} socket={socket}/>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default props => {\r\n    return (\r\n        <div>\r\n            <h1>Profile</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default props => {\r\n    return (\r\n        <div>\r\n            <h1>Home</h1>\r\n        </div>\r\n    )\r\n}","import React,{useState} from 'react';\r\nimport {AppBar,Toolbar,Typography} from '@material-ui/core';\r\nimport {Link} from '@reach/router';\r\n\r\nexport default props => {\r\n    const [auth,setAuth] = useState(false);\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h4\" >\r\n                  <Link style={{color:\"white\"}} to=\"/\">Tazkr</Link>\r\n                </Typography>\r\n                <Typography variant=\"h4\">\r\n                  <Link style={{color:\"white\"}} to=\"/board\">Board</Link>\r\n                </Typography>\r\n                <Typography variant=\"h4\">\r\n                  {auth ? \r\n                  <Link style={{color:\"white\"}} to=\"/profile\">Profile</Link> : \r\n                  <Link style={{color:\"white\"}} to=\"/login\">Login</Link>}\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}","import React from 'react';\r\nimport {Router} from '@reach/router';\r\nimport Board from './views/Board';\r\nimport Login from './views/Login';\r\nimport Profile from './views/Profile';\r\nimport Home from './views/Home';\r\nimport Navbar from './components/Navbar';\r\nimport './App.css';\r\n\r\nexport default () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <Router>\r\n        <Home path=\"/\"/>\r\n        <Login path=\"/login\"/>\r\n        <Profile path=\"/profile/:id\"/>\r\n        <Board path=\"/board/:id\"/>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}